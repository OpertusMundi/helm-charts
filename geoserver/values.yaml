
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

geoserver:

  replicaCount: 1
  
  image:
    repository: kartoza/geoserver
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.21.0"
  imagePullSecrets: []
  
  # the service name that governs the statefulset (fullname if empty)
  serviceName:
  
  persistence:
    dataDir:
      storageClassName: nfs-1
      accessMode: ReadWriteMany
      size: 1Gi
      extraMatchLabels: {}
    geowebcacheCacheDir:
      storageClassName: nfs-1
      accessMode: ReadWriteMany
      size: 4Gi
      extraMatchLabels: {}
  
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  
  # see https://github.com/kartoza/docker-geoserver#proxy-base-url
  proxy: {}
  #  hostname: geoserver.example.net
  #  https: true
  #  port: 443
  
  adminPassword:
    secretName:
 
  podSecurityContext:
    gid: 10001

  resources:
    limits:
      cpu: 2500m
      memory: 3072Mi
    requests:
      cpu: 1500m
      memory: 2048Mi

  datastore:
    postgis:
      enabled: true
      # do we want to co-locate geoserver Pod with master database Pod?
      affinityPref: true
      # do we need to setup the PostGis database (with a post-install hook)?
      setupDatabase: true
      databaseName: geodata
      databaseUser: geodata


# Create a command-line Pod with curl
curl:
  create: true
  image: 'curlimages/curl:7.75.0'
  userDir: /home/curl_user
  userName: curl_user
  gid: 101

#
# Subchart "postgresql-cluster"
#
postgresql-cluster:
  nameOverride: postgis
  serviceAccount:
    create: false
  postgres:
    image: 'postgis/postgis:10-3.0-alpine'
    replicas: 1
    replicasToSync: 1
  pgpool:
    enabled: false


